1. 线程池可以使用Executors和ThreadPoolExecutor，其中使用Executors有六种创建线程池的方法
2. 线程池解读
(1). newSingleThreadExecutor()，它的特点在于工作线程数目被限制为 1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目。
(2). newCachedThreadPool()，它是一种用来处理大量短时间工作任务的线程池，具有几个鲜明特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过 60 秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue 作为工作队列。
(3). newFixedThreadPool(int nThreads)，重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有 nThreads 个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads。
(4). newSingleThreadScheduledExecutor() 创建单线程池，返回 ScheduledExecutorService，可以进行定时或周期性的工作调度。
(5). newScheduledThreadPool(int corePoolSize)和newSingleThreadScheduledExecutor()类似，创建的是个 ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程。
(6). newWorkStealingPool(int parallelism)，这是一个经常被人忽略的线程池，Java 8 才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序。
(7). ThreadPoolExecutor是最原始的线程池创建，上面1-3创建方式都是对ThreadPoolExecutor的封装。

3. ThreadPoolExecutor作为线程池的核心方法, 其参数说明如下：
public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {}
corePoolSize：所谓的核心线程数，可以大致理解为长期驻留的线程数目（除非设置了 allowCoreThreadTimeOut）。对于不同的线程池，这个值可能会有很大区别，比如 newFixedThreadPool 会将其设置为 nThreads，而对于 newCachedThreadPool 则是为 0。
maximumPoolSize：顾名思义，就是线程不够时能够创建的最大线程数。同样进行对比，对于 newFixedThreadPool，当然就是 nThreads，因为其要求是固定大小，而 newCachedThreadPool 则是 Integer.MAX_VALUE。
keepAliveTime：空闲线程的保活时间，如果线程的空闲时间超过这个值，那么将会被关闭。注意此值生效条件必须满足：空闲时间超过这个值，并且线程池中的线程数少于等于核心线程数corePoolSize。当然核心线程默认是不会关闭的，除非设置了allowCoreThreadTimeOut(true)那么核心线程也可以被回收。
TimeUnit：时间单位。
BlockingQueue：任务队列，用于存储线程池的待执行任务的。
threadFactory：用于生成线程，一般我们可以用默认的就可以了。
handler：当线程池已经满了，但是又有新的任务提交的时候，该采取什么策略由这个来指定。有几种方式可供选择，像抛出异常、直接拒绝然后返回等，也可以自己实现相应的接口实现自己的逻辑。

4.  /*
       1)  SingleThreadExecutor：单个后台线程 (其缓冲队列是LinkedBlockingQueue，无界的)

   创建一个单线程的线程池。这个线程池只有一个核心线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。

   举例子：比如一个村里只有一口井，每次只能一个人打水，先来先打。

   2)  FixedThreadPool：只有核心线程的线程池,大小固定(其缓冲队列是LinkedBlockingQueue，无界的) 。

   创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。

   举例子：村里有3口井，大家排队打井水，可以无数人排队，井只有3口，每次最多只能有3个人打井水。没人打水时，3口井也在那里。由于线程不会回收，FixThreadPool会更快地响应外界请求，这也很容易理解，就好像有人突然想打井水，井不是现用现建的。

   3)  CachedThreadPool：无界线程池，可以进行自动线程回收。（其缓冲队列是SynchronousQueue，一个是缓冲区为1的阻塞队列

   如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）的线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。

   举个例子：CachedThreadPool就像是一堆人去一个很大的咖啡馆喝咖啡，里面服务员也很多，随时去，随时都可以喝到咖啡。但是为了响应国家的“光盘行动”，一个人喝剩下的咖啡会被保留60秒，供新来的客人使用，哈哈哈哈哈，好恶心啊。如果你运气好，没有剩下的咖啡，你会得到一杯新咖啡。但是以前客人剩下的咖啡超过60秒，就变质了，会被服务员回收掉。比较适合执行大量的耗时较少的任务。喝咖啡人挺多的，喝的时间也不长。

   4)ScheduledThreadPool：核心线程池固定，大小无限的线程池。核心线程数固定，非核心线程（闲着没活干会被立即回收）数没有限制。此线程池支持定时以及周期性执行任务的需求。

5. relation:
  (1). public class ThreadPoolExecutor extends AbstractExecutorService
  (2). public abstract class AbstractExecutorService implements ExecutorService
  (3). public interface ExecutorService extends Executor
